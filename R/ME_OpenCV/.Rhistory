p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
Da$WC <- with(Da,WindowOffset-WindowOnset+1)
Dr$WC <- with(Dr,WindowOffset-WindowOnset+1)
Da$WType = factor(with(Da,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
Dr$WType = factor(with(Dr,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))#compare the counts of each of those WType
matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))))
#The purpose of the test is to see if there is a statistically significant association between the datasets (Da and Dr) and the categories of WType.
#Thus, there is a significant interaction between the WType and data provenance type (actual vs. real) on WC.
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))),nrow=3),0.05)
table(Da)
matrix(c(with(Da, table(WC, WType)), with(Dr, table(WC, WType))))
with(Dr, table(WC, WType))
table(Da)
matrix(c(with(Da, table(WC, WType)), with(Dr, table(WC, WType))))
with(Dr, table(WC, WType))
#SessionWise
sessions <- unique(Da$Session)
for(session in sessions) {
print("                                   ")
print("*********************************   ")
print("                                   ")
print(session)
session_actual <- subset(Da, Session == session)
session_reversed <- subset(Dr, Session == session)
session_actual$WC <- with(session_actual,WindowOffset-WindowOnset+1)
session_reversed$WC <- with(session_reversed,WindowOffset-WindowOnset+1)
session_actual$WType = factor(with(session_actual,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
session_reversed$WType = factor(with(session_reversed,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
print(c(with(session_actual,xtabs(WC~WType)),with(session_reversed,xtabs(WC~WType))))#compare the counts of each of those WType
print(chisq.apr(matrix(c(with(session_actual,xtabs(WC~WType)),with(session_reversed,xtabs(WC~WType))),nrow=3),0.05))
}
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<0.05,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<0.05,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
library(ngram)
Dagram<-get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=3))
Dagram$Source<-factor("Actual")
Drgram<-get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=3))
Drgram$Source<-factor("Reverse")
D <- rbind(Dagram,Drgram)
contingency_table <- table(D$freq, D$Source)
chisq.test(contingency_table)
xtabs()
matrix()
chisq.test(
matrix(
c(
get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=3))$freq,
get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=3))$freq
),nrow=9,
)
)
summary(matrix(
c(
get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=3))$freq,
get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=3))$freq
),nrow=9,
))
chisq.test(
matrix(
c(
get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=2))$freq,
get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=2))$freq
),nrow=9,
)
)$residuals
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_W03_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reverse_Demog_W03_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reverse_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reverse_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<0.05,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<0.05,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
library(ngram)
Dagram<-get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=3))
Dagram$Source<-factor("Actual")
Drgram<-get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=3))
Drgram$Source<-factor("Reverse")
D <- rbind(Dagram,Drgram)#long format
contingency_table <- table(D$ngrams, D$Source)
chisq.test(contingency_table)
contingency_table
Dagram<-get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=3))
Dagram$Source<-factor("Actual")
Drgram<-get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=3))
Drgram$Source<-factor("Reverse")
D <- rbind(Dagram,Drgram)#long format
contingency_table <- table(D$ngrams, D$Source)
chisq.test(contingency_table)
contingency_table
contingency_table <- table(D$freq, D$Source)
contingency_table#this structure is wrong, since the values are less than 5. for Chi values should be more than 5. Also, it does not consider the ngrmas of acutal vs Reversed
chisq.test(contingency_table)
library(ngram)
Dagram<-get.phrasetable(ngram(concatenate(as.character(Da$L0SigC[0:nrow(Da)])),n=2))
Dagram$Source<-factor("Actual")
Drgram<-get.phrasetable(ngram(concatenate(as.character(Dr$L0SigC[0:nrow(Dr)])),n=2))
Drgram$Source<-factor("Reverse")
D <- rbind(Dagram,Drgram)#long format
contingency_table <- table(D$ngrams, D$Source)
chisq.test(contingency_table)
contingency_table <- table(D$freq, D$Source)
chisq.test(contingency_table)
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reverse_Demog_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<0.05,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<0.05,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
time_series <-Da$L0SigC
# Initialize an empty vector to store 3-grams
three_grams <- vector("list", length(time_series) - 2)
# Generate 3-grams
for (i in 1:(length(time_series) - 2)) {
three_grams[[i]] <- paste(time_series[i], time_series[i+1], time_series[i+2])
}
three_grams_vector <- unlist(three_grams)
Dag <- data.frame(ngrams = rep(NA, length(three_grams_vector)))
Dag$ngrams <- three_grams_vector
Dag$Resource <- factor(rep("Actual", nrow(Dag)))
time_series <-Dr$L0SigC
# Initialize an empty vector to store 3-grams
three_grams <- vector("list", length(time_series) - 2)
# Generate 3-grams
for (i in 1:(length(time_series) - 2)) {
three_grams[[i]] <- paste(time_series[i], time_series[i+1], time_series[i+2])
}
three_grams_vector <- unlist(three_grams)
Drg <- data.frame(ngrams = rep(NA, length(three_grams_vector)))
Drg$ngrams <- three_grams_vector
Drg$Resource <- factor(rep("Reverse", nrow(Drg)))
Dallgrams <- rbind(Dag,Drg)
with(Dallgrams,chisq.test(ngrams,Resource)$residuals)
with(Dallgrams,kruskal.test(ngrams~Resource))
with(Dallgrams,kruskal.test(Resource~ngrams))
#per session
sessions <- unique(Da$Session)
for(session in sessions) {
print("                                   ")
print("*********************************   ")
print("                                   ")
print(session)
session_actual <- subset(Da, Session == session)
session_reversed <- subset(Dr, Session == session)
time_series <-session_actual$L0SigC
# Initialize an empty vector to store 3-grams
three_grams <- vector("list", length(time_series) - 2)
# Generate 3-grams
for (i in 1:(length(time_series) - 2)) {
three_grams[[i]] <- paste(time_series[i], time_series[i+1], time_series[i+2])
}
three_grams_vector <- unlist(three_grams)
Dag <- data.frame(ngrams = rep(NA, length(three_grams_vector)))
Dag$ngrams <- three_grams_vector
Dag$Resource <- factor(rep("Actual", nrow(Dag)))
#Reversed
time_series <-session_reversed$L0SigC
# Initialize an empty vector to store 3-grams
three_grams <- vector("list", length(time_series) - 2)
# Generate 3-grams
for (i in 1:(length(time_series) - 2)) {
three_grams[[i]] <- paste(time_series[i], time_series[i+1], time_series[i+2])
}
three_grams_vector <- unlist(three_grams)
Drg <- data.frame(ngrams = rep(NA, length(three_grams_vector)))
Drg$ngrams <- three_grams_vector
Drg$Resource <- factor(rep("Reverse", nrow(Drg)))
Dallgrams <- rbind(Dag,Drg)
print(with(Dallgrams,chisq.test(ngrams,Resource)))
print(with(Dallgrams,kruskal.test(ngrams~Resource)))
print(with(Dallgrams,kruskal.test(Resource~ngrams)))
}
################# Time series computations
library(xts)
##Autocorrelation
#SessionWise
library(dplyr)
library(ggplot2)
# Assuming 'Da' is your data frame
sessions <- unique(Da$Session)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
#SessionWise
library(dplyr)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
# Assuming 'Da' is your data frame
sessions <- unique(Da$Session)
for (session in sessions) {
# Filter the data for the current session
session_data <- filter(Da, Session == session)
# Compute the ACF
acf_result <- acf(session_data$TotalME_By_Left_On_Lag_0_second, lag.max = NULL, type = "correlation", plot = TRUE)
# Create the plot title with session value
plot_title <- paste("ME_Left_ACF_Session_", session)
# Add the title to the plot
plot(acf_result, main = plot_title)
# Save the plot
file_name <- paste("ME_Left_ACF_Session_", session, ".png", sep = "")
png(file_name)
plot(acf_result, main = plot_title)
dev.off()
}
# Assuming 'Da' is your data frame
sessions <- unique(Da$Session)
for (session in sessions) {
# Filter the data for the current session
session_data <- filter(Da, Session == session)
# Compute the ACF
acf_result <- acf(session_data$TotalME_By_Left_On_Lag_0_second, lag.max = NULL, type = "correlation", plot = TRUE)
# Create the plot title with session value
plot_title <- paste("ME_Left_ACF_Session_", session)
# Add the title to the plot
plot(acf_result, main = plot_title)
# Save the plot
file_name <- paste("Open_CV_ME_Left_ACF_Session_", session, ".png", sep = "")
png(file_name)
plot(acf_result, main = plot_title)
dev.off()
}
View(Da)
################# Time series computations
library(xts)
##Autocorrelation
#SessionWise
library(dplyr)
library(ggplot2)
# Assuming 'Da' is your data frame
sessions <- unique(Da$Session)
for (session in sessions) {
# Filter the data for the current session
session_data <- filter(Da, Session == session)
# Compute the ACF
acf_result <- acf(session_data$TotalME_By_Left_On_Lag_0_second, lag.max = NULL, type = "correlation", plot = TRUE)
# Create the plot title with session value
plot_title <- paste("ME_Left_ACF_Session_", session)
# Add the title to the plot
plot(acf_result, main = plot_title)
# Save the plot
file_name <- paste("Open_CV_ME_Left_ACF_Session_", session, ".png", sep = "")
png(file_name)
plot(acf_result, main = plot_title)
dev.off()
}
Da$WindowNumber
###Reversal Data
DRV <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
DRV$Dominance <- with(DRV,factor(ifelse(LeftDominanceMedian>RightDominanceMedian,"LEFT",ifelse(RightDominanceMedian>LeftDominanceMedian,"RIGHT","EQUAL"))))
###Reversal Data
DRV <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
DRV$Dominance <- with(DRV,factor(ifelse(LeftDominanceMedian>RightDominanceMedian,"LEFT",ifelse(RightDominanceMedian>LeftDominanceMedian,"RIGHT","EQUAL"))))
signif(with(DRV,tapply((FisherZ_Lag_0_second),Dominance,mean)),4) #Collaboration
signif(with(DRV[DRV$Pval_Lag_0_second<0.05,],tapply((FisherZ_Lag_0_second),Dominance,mean)),4)
signif(with(DRV[DRV$Pval_Lag_0_second<0.05,],tapply(abs(FisherZ_Lag_0_second),Dominance,mean)),4)
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Actual_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Reversed_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print(chisq.test(x))
adjustedresiduals <- chisq.test(x)$stdres
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
Da$WC <- with(Da,WindowOffset-WindowOnset+1)
Dr$WC <- with(Dr,WindowOffset-WindowOnset+1)
Da$WType = factor(with(Da,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
Dr$WType = factor(with(Dr,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))#compare the counts of each of those WType
matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))))
#The purpose of the test is to see if there is a statistically significant association between the datasets (Da and Dr) and the categories of WType.
#Thus, there is a significant interaction between the WType and data provenance type (actual vs. real) on WC.
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))),nrow=3),0.05)
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Actual_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Reversed_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print(chisq.test(x))
adjustedresiduals <- chisq.test(x)$stdres
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
Da$WC <- with(Da,WindowOffset-WindowOnset+1)
Dr$WC <- with(Dr,WindowOffset-WindowOnset+1)
Da$WType = factor(with(Da,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
Dr$WType = factor(with(Dr,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Actual_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Reversed_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print(chisq.test(x))
adjustedresiduals <- chisq.test(x)$stdres
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
Da$WC <- with(Da,WindowOffset-WindowOnset+1)
Dr$WC <- with(Dr,WindowOffset-WindowOnset+1)
Da$WType = factor(with(Da,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
Dr$WType = factor(with(Dr,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))#compare the counts of each of those WType
matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))))
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Actual_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Reversed_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print(chisq.test(x))
adjustedresiduals <- chisq.test(x)$stdres
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
Da$WC <- with(Da,WindowOffset-WindowOnset+1)
Dr$WC <- with(Dr,WindowOffset-WindowOnset+1)
Da$WType = factor(with(Da,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
Dr$WType = factor(with(Dr,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))#compare the counts of each of those WType
matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))))
#The purpose of the test is to see if there is a statistically significant association between the datasets (Da and Dr) and the categories of WType.
#Thus, there is a significant interaction between the WType and data provenance type (actual vs. real) on WC.
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))),nrow=3),0.05)
table(Da)
matrix(c(with(Da, table(WC, WType)), with(Dr, table(WC, WType))))
#The purpose of the test is to see if there is a statistically significant association between the datasets (Da and Dr) and the categories of WType.
#Thus, there is a significant interaction between the WType and data provenance type (actual vs. real) on WC.
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))),nrow=3),0.05)
table(Da)
matrix(c(with(Da, table(WC, WType)), with(Dr, table(WC, WType))))
with(Dr, table(WC, WType))
#SessionWise
sessions <- unique(Da$Session)
for(session in sessions) {
print("                                   ")
print("*********************************   ")
print("                                   ")
print(session)
session_actual <- subset(Da, Session == session)
session_reversed <- subset(Dr, Session == session)
session_actual$WC <- with(session_actual,WindowOffset-WindowOnset+1)
session_reversed$WC <- with(session_reversed,WindowOffset-WindowOnset+1)
session_actual$WType = factor(with(session_actual,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
session_reversed$WType = factor(with(session_reversed,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
print(c(with(session_actual,xtabs(WC~WType)),with(session_reversed,xtabs(WC~WType))))#compare the counts of each of those WType
print(chisq.apr(matrix(c(with(session_actual,xtabs(WC~WType)),with(session_reversed,xtabs(WC~WType))),nrow=3),0.05))
}
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Actual_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/Reversed_SuccessiveWindows_OpenCV.csv",header=TRUE,stringsAsFactors=TRUE)
View(Da)
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print(chisq.test(x))
adjustedresiduals <- chisq.test(x)$stdres
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
Da$WC <- with(Da,WindowOffset-WindowOnset+1)
Dr$WC <- with(Dr,WindowOffset-WindowOnset+1)
Da$WType = factor(with(Da,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))#none for non-sig, One for one
Dr$WType = factor(with(Dr,ifelse(Counts==0,"None",ifelse(Counts==1,"One","Plural"))))
#The purpose of the test is to see if there is a statistically significant association between the datasets (Da and Dr) and the categories of WType.
#Thus, there is a significant interaction between the WType and data provenance type (actual vs. real) on WC.
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))),nrow=3),0.05)
c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))#compare the counts of each of those WType
matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))))
c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))#compare the counts of each of those WType
matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))))
matrix(with(Da,xtabs(WC~WType)))
#The purpose of the test is to see if there is a statistically significant association between the datasets (Da and Dr) and the categories of WType.
#Thus, there is a significant interaction between the WType and data provenance type (actual vs. real) on WC.
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType))),nrow=3),0.05)
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),with(Dr,xtabs(WC~WType)))),0.05)
chisq.apr(matrix(c(with(Da,xtabs(WC~WType)),0.05)
chisq.apr(matrix(with(Da,xtabs(WC~WType)),0.05))
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<0.05,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<0.05,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<0.05,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<0.05,1,0))
Da <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Reversed_Demog_ME_OpenCV_W03/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<0.05,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<0.05,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<0.05,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print(chisq.test(x))
adjustedresiduals <- chisq.test(x)$stdres
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE))
)
}
#per session
sessions <- unique(Da$Session)
for(session in sessions) {
print("                                   ")
print("*********************************   ")
print("                                   ")
print(session)
session_actual <- subset(Da, Session == session)
session_reversed <- subset(Dr, Session == session)
time_series <-session_actual$L0SigC
# Initialize an empty vector to store 3-grams
three_grams <- vector("list", length(time_series) - 2)
# Generate 3-grams
for (i in 1:(length(time_series) - 2)) {
three_grams[[i]] <- paste(time_series[i], time_series[i+1], time_series[i+2])
}
three_grams_vector <- unlist(three_grams)
Da3grams <- data.frame(ngrams = rep(NA, length(three_grams_vector)))
Da3grams$ngrams <- three_grams_vector
Da3grams$Resource <- factor(rep("Actual", nrow(Da3grams)))
#Reversed
time_series <-session_reversed$L0SigC
# Initialize an empty vector to store 3-grams
three_grams <- vector("list", length(time_series) - 2)
# Generate 3-grams
for (i in 1:(length(time_series) - 2)) {
three_grams[[i]] <- paste(time_series[i], time_series[i+1], time_series[i+2])
}
three_grams_vector <- unlist(three_grams)
Dr3grams <- data.frame(ngrams = rep(NA, length(three_grams_vector)))
Dr3grams$ngrams <- three_grams_vector
Dr3grams$Resource <- factor(rep("Reverse", nrow(Dr3grams)))
Dallgrams <- rbind(Da3grams,Dr3grams)
print("************")
chisq.apr(with(Dallgrams,xtabs(~ngrams+Resource)),0.05)
print(with(Dallgrams,kruskal.test(Resource~ngrams)))
}
View(Dallgrams)
View(Dallgrams)
View(Dallgrams)
# ME_Ramseyar
# ME_OpenCV
# ME_OpenCV_W025
# Set the working directory to your folder
setwd("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/R/ME_OpenCV")
# ME_Ramseyar
# ME_OpenCV
# ME_OpenCV_W025
# Set the working directory to your folder
setwd("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/R/ME_OpenCV")
# Get a list of all CSV files in the directory
file_list <- list.files(pattern="*.csv")
# Initialize an empty list to store results (optional)
results <- list()
# Loop through each file
for (file in file_list) {
# Read the CSV file
DA <- read.csv(file, header=TRUE, stringsAsFactors=TRUE)
# Perform the Spearman correlation test
test_result <- with(DA, cor.test(ZscoreLeftME,ZscoreRightME, method="spearman"))
# Print the result (or store it)
print(paste("Results for file:", file))
print(test_result)
print("*************************************")
# Store the result (optional)
results[[file]] <- test_result
}
###Actual Data
DA <- read.csv("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows/Results/Data4Carl/FinalData_Actual_Demog_ME_OpenCV_W03_Zscore/DATA_Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv.csv",header=TRUE,stringsAsFactors=TRUE)
DA$Dominance <- with(DA,factor(ifelse(LeftDominanceMedian>RightDominanceMedian,"LEFT",ifelse(RightDominanceMedian>LeftDominanceMedian,"RIGHT","EQUAL"))))
signif(with(DA[DA$Pval_Lag_0_second<0.05,],tapply(FisherZ_Lag_0_second,Dominance,mean)),4)
with(DA[DA$Pval_Lag_0_second<0.05,],cor.test((FisherZ_Lag_0_second),LeftDominanceMedian,method="spearman"))
with(DA[DA$Pval_Lag_0_second<0.05,],cor.test((FisherZ_Lag_0_second),RightDominanceMedian,method="spearman"))
