theme(strip.text.y = element_text(size = 9),#this is for pos neg
strip.text.x = element_text(size = 12, face = "bold", angle = 0), # Adjust angle here for horizontal facets
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 14, face = "bold"),
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "cm"))
}
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Reversed_rMEA_All_Pval/FinalData_Reversed_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session
sessions <- unique(Da$Session)
# Initialize Dallgrams outside the loop to collect data across all sessions
Dallgrams <- data.frame(ngrams = character(), Resource = factor())
# Iterate over sessions
for(session in unique(Da$Session)) {
session_d1 <- subset(Da, Session == session)
time_series_d1 <- session_d1$L0SigC
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = three_grams_vector_d1, Resource = factor(rep("Actual", length(three_grams_vector_d1))))
session_d2 <- subset(Dr, Session == session)
time_series_d2 <- session_d2$L0SigC
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = three_grams_vector_d2, Resource = factor(rep("Reversed", length(three_grams_vector_d2))))
# Append to Dallgrams
Dallgrams <- rbind(Dallgrams, Da3grams_d1, Dr3grams_d2)
}
# Aggregate Dallgrams to sum counts for each unique ngrams and Resource combination
Dallgrams$Count <- 1 # Add a count column for aggregation
DallgramsSum <- aggregate(Count ~ ngrams + Resource, data = Dallgrams, FUN = sum)
# Now DallgramsSum contains the summed counts for all ngrams and Resource combinations across all sessions
DallgramsSum$Resource <- as.factor(DallgramsSum$Resource)
DallgramsSum$ngrams <- as.factor(DallgramsSum$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
contingencyTable <- xtabs(Count ~ ngrams + Resource, data = DallgramsSum)
chisq.apr(contingencyTable,0.05)
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print("********************")
#print(x)
print(chisq.test(x))
#print("This is observation")
#print(chisq.test(x)$observed)
adjustedresiduals <- chisq.test(x)$stdres
print("This is Residuals")
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE)))
print("                                 ")
if (chisq.test(x)$p.value<0.05)
print(" It IS SIG")
print("this is expection")
print(chisq.test(x)$expected)
}
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print("********************")
#print(x)
print(chisq.test(x))
#print("This is observation")
#print(chisq.test(x)$observed)
adjustedresiduals <- chisq.test(x)$stdres
print("This is Residuals")
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE)))
print("                                 ")
if (chisq.test(x)$p.value<0.05)
print(" It IS SIG")
print("this is expection")
print(chisq.test(x)$expected)
}
require(foreign)
require(ggplot2)
require(MASS)
require(reshape2)
chisq_plot.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print("********************")
print(chisq.test(x))
print("This is observation")
print(chisq.test(x)$observed)
adjustedresiduals <- chisq.test(x)$stdres
print("This is adjusted residuals table")
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE)))
print("                                 ")
print("this is expection")
print(chisq.test(x)$expected)
if (chisq.test(x)$p.value<0.05)
print(" It IS SIG")
df_residuals <- as.data.frame(as.table(adjustedresiduals))
ggsave("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows_final/R/Data2Test/S.png", plot = last_plot(), width = 5, height =6, units = "in")
ggplot(df_residuals, aes(x = "", y = "", fill = Freq)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", Freq)), vjust = 0, size = 5) +#this is the size of numbers
facet_grid(ngrams ~ Resource) +
#geom_tile(width = 5, height = 2) + # Increase or decrease to adjust visual spacing
scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, limit = c(min(df_residuals$Freq), max(df_residuals$Freq))) +
labs(title = "", x = "", y = "") +
theme(strip.text.y = element_text(size = 9),#this is for pos neg
strip.text.x = element_text(size = 12, face = "bold", angle = 0), # Adjust angle here for horizontal facets
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 14, face = "bold"),
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "cm"))
}
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Reversed_rMEA_All_Pval/FinalData_Reversed_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session #Acutal and Reversed Per sessions
sessions <- unique(Da$Session)
for(session in sessions) {
print("********************")
print(session)
session_d1<- subset(Da, Session == session)
time_series_d1 <-session_d1$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d1)))
Da3grams_d1$ngrams <- three_grams_vector_d1
Da3grams_d1$Resource <- factor(rep("D1", nrow(Da3grams_d1)))
#Reversed
session_d2 <- subset(Dr, Session == session)
time_series_d2 <-session_d2$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d2)))
Dr3grams_d2$ngrams <- three_grams_vector_d2
Dr3grams_d2$Resource <- factor(rep("D2", nrow(Dr3grams_d2)))
Dallgrams <- rbind(Da3grams_d1,Dr3grams_d2)
Dallgrams$Resource <- as.factor(Dallgrams$Resource)
Dallgrams$ngrams <- as.factor(Dallgrams$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
d1_counts <- with(Dallgrams, xtabs(~ ngrams + Resource))
chisq.apr(d1_counts,0.05)
}
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Reversed_rMEA_All_Pval/FinalData_Reversed_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session
sessions <- unique(Da$Session)
# Initialize Dallgrams outside the loop to collect data across all sessions
Dallgrams <- data.frame(ngrams = character(), Resource = factor())
# Iterate over sessions
for(session in unique(Da$Session)) {
session_d1 <- subset(Da, Session == session)
time_series_d1 <- session_d1$L0SigC
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = three_grams_vector_d1, Resource = factor(rep("Actual", length(three_grams_vector_d1))))
session_d2 <- subset(Dr, Session == session)
time_series_d2 <- session_d2$L0SigC
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = three_grams_vector_d2, Resource = factor(rep("Reversed", length(three_grams_vector_d2))))
# Append to Dallgrams
Dallgrams <- rbind(Dallgrams, Da3grams_d1, Dr3grams_d2)
}
# Aggregate Dallgrams to sum counts for each unique ngrams and Resource combination
Dallgrams$Count <- 1 # Add a count column for aggregation
# Aggregate Dallgrams to sum counts for each unique ngrams and Resource combination
Dallgrams$Count <- 1 # Add a count column for aggregation
DallgramsSum <- aggregate(Count ~ ngrams + Resource, data = Dallgrams, FUN = sum)
# Now DallgramsSum contains the summed counts for all ngrams and Resource combinations across all sessions
DallgramsSum$Resource <- as.factor(DallgramsSum$Resource)
DallgramsSum$ngrams <- as.factor(DallgramsSum$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
contingencyTable <- xtabs(Count ~ ngrams + Resource, data = DallgramsSum)
chisq_plot.apr(contingencyTable,0.05)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session #Acutal and Reversed Per sessions
sessions <- unique(Da$Session)
for(session in sessions) {
print("********************")
print(session)
session_d1<- subset(Da, Session == session)
time_series_d1 <-session_d1$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d1)))
Da3grams_d1$ngrams <- three_grams_vector_d1
Da3grams_d1$Resource <- factor(rep("D1", nrow(Da3grams_d1)))
#Reversed
session_d2 <- subset(Dr, Session == session)
time_series_d2 <-session_d2$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d2)))
Dr3grams_d2$ngrams <- three_grams_vector_d2
Dr3grams_d2$Resource <- factor(rep("D2", nrow(Dr3grams_d2)))
Dallgrams <- rbind(Da3grams_d1,Dr3grams_d2)
Dallgrams$Resource <- as.factor(Dallgrams$Resource)
Dallgrams$ngrams <- as.factor(Dallgrams$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
d1_counts <- with(Dallgrams, xtabs(~ ngrams + Resource))
chisq.apr(d1_counts,0.05)
}
chisq.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print("********************")
#print(x)
print(chisq.test(x))
#print("This is observation")
#print(chisq.test(x)$observed)
adjustedresiduals <- chisq.test(x)$stdres
print("This is Residuals")
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE)))
print("                                 ")
if (chisq.test(x)$p.value<0.05)
print(" It IS SIG")
print("this is expection")
print(chisq.test(x)$expected)
}
require(foreign)
require(ggplot2)
require(MASS)
require(reshape2)
chisq_plot.apr <- function(x,alpha) { # chi-squared adjusted pearson residuals N(0,1)
print("********************")
print(chisq.test(x))
print("This is observation")
print(chisq.test(x)$observed)
adjustedresiduals <- chisq.test(x)$stdres
print("This is adjusted residuals table")
print(signif(adjustedresiduals),4)
#        return(chisq.test(x)$y)
dim <- nrow(x)*ncol(x)
p <- (alpha/dim) # bonferroni correction
print(paste0("dimensions ","(",nrow(x),"x",ncol(x),"): ",dim))
print(paste0("Bonferroni adjustment to alpha: ",p))
print(paste0("two-tailed critical value: ",qnorm(p/2,lower.tail=FALSE)))
print("                                 ")
print("this is expection")
print(chisq.test(x)$expected)
if (chisq.test(x)$p.value<0.05)
print(" It IS SIG")
df_residuals <- as.data.frame(as.table(adjustedresiduals))
ggsave("/Users/zohrehkhosrobeigi/Documents/MyPAPER/Papers/LeadingFolloingWindows_final/R/Data2Test/S.png", plot = last_plot(), width = 5, height =6, units = "in")
ggplot(df_residuals, aes(x = "", y = "", fill = Freq)) +
geom_tile() +
geom_text(aes(label = sprintf("%.2f", Freq)), vjust = 0, size = 5) +#this is the size of numbers
facet_grid(ngrams ~ Resource) +
#geom_tile(width = 5, height = 2) + # Increase or decrease to adjust visual spacing
scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 0, limit = c(min(df_residuals$Freq), max(df_residuals$Freq))) +
labs(title = "", x = "", y = "") +
theme(strip.text.y = element_text(size = 9),#this is for pos neg
strip.text.x = element_text(size = 12, face = "bold", angle = 0), # Adjust angle here for horizontal facets
axis.text = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 14, face = "bold"),
plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = "cm"))
}
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session #Acutal and Reversed Per sessions
sessions <- unique(Da$Session)
#per session #Acutal and Shuffled Per sessions
sessions <- unique(Da$Session)
for(session in sessions) {
print("********************")
print(session)
session_d1<- subset(Da, Session == session)
time_series_d1 <-session_d1$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d1)))
Da3grams_d1$ngrams <- three_grams_vector_d1
Da3grams_d1$Resource <- factor(rep("D1", nrow(Da3grams_d1)))
#Reversed
session_d2 <- subset(Dr, Session == session)
time_series_d2 <-session_d2$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d2)))
Dr3grams_d2$ngrams <- three_grams_vector_d2
Dr3grams_d2$Resource <- factor(rep("D2", nrow(Dr3grams_d2)))
Dallgrams <- rbind(Da3grams_d1,Dr3grams_d2)
Dallgrams$Resource <- as.factor(Dallgrams$Resource)
Dallgrams$ngrams <- as.factor(Dallgrams$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
d1_counts <- with(Dallgrams, xtabs(~ ngrams + Resource))
chisq.apr(d1_counts,0.05)
}
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Shuffled_rMEA_All_Pval/FinalData_Shuffled_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session
sessions <- unique(Da$Session)
# Initialize Dallgrams outside the loop to collect data across all sessions
Dallgrams <- data.frame(ngrams = character(), Resource = factor())
# Iterate over sessions
for(session in unique(Da$Session)) {
session_d1 <- subset(Da, Session == session)
time_series_d1 <- session_d1$L0SigC
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = three_grams_vector_d1, Resource = factor(rep("Actual", length(three_grams_vector_d1))))
session_d2 <- subset(Dr, Session == session)
time_series_d2 <- session_d2$L0SigC
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = three_grams_vector_d2, Resource = factor(rep("Shuffled", length(three_grams_vector_d2))))
# Append to Dallgrams
Dallgrams <- rbind(Dallgrams, Da3grams_d1, Dr3grams_d2)
}
# Aggregate Dallgrams to sum counts for each unique ngrams and Resource combination
Dallgrams$Count <- 1 # Add a count column for aggregation
DallgramsSum <- aggregate(Count ~ ngrams + Resource, data = Dallgrams, FUN = sum)
# Now DallgramsSum contains the summed counts for all ngrams and Resource combinations across all sessions
DallgramsSum$Resource <- as.factor(DallgramsSum$Resource)
DallgramsSum$ngrams <- as.factor(DallgramsSum$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
contingencyTable <- xtabs(Count ~ ngrams + Resource, data = DallgramsSum)
chisq_plot.apr(contingencyTable,0.05)
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Reversed_rMEA_All_Pval/FinalData_Reversed_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session #Acutal and Reversed Per sessions
sessions <- unique(Da$Session)
for(session in sessions) {
print("********************")
print(session)
session_d1<- subset(Da, Session == session)
time_series_d1 <-session_d1$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d1)))
Da3grams_d1$ngrams <- three_grams_vector_d1
Da3grams_d1$Resource <- factor(rep("D1", nrow(Da3grams_d1)))
#Reversed
session_d2 <- subset(Dr, Session == session)
time_series_d2 <-session_d2$L0SigC
# Initialize an empty vector to store 3-grams
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
# Generate 3-grams
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = rep(NA, length(three_grams_vector_d2)))
Dr3grams_d2$ngrams <- three_grams_vector_d2
Dr3grams_d2$Resource <- factor(rep("D2", nrow(Dr3grams_d2)))
Dallgrams <- rbind(Da3grams_d1,Dr3grams_d2)
Dallgrams$Resource <- as.factor(Dallgrams$Resource)
Dallgrams$ngrams <- as.factor(Dallgrams$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
d1_counts <- with(Dallgrams, xtabs(~ ngrams + Resource))
chisq.apr(d1_counts,0.05)
}
############ All Sessions Reversed
#Acutal and Reversed for all sessions, to have one contingency table
Da <- read.csv("Data2Test/W_03_Output_Actual_rMEA_All_Pval/FinalData_Actual_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
Dr <- read.csv("Data2Test/W_03_Output_Reversed_rMEA_All_Pval/FinalData_Reversed_ME_Demog_rMEA_All_Pval/Aggregated_CC_WindowLength_0.3_Lag_3_Correlation_wins.csv",header=TRUE,stringsAsFactors=TRUE)
bon<-0.05/32547
threshold<-0.05
Da$L0SigBin <- with(Da,ifelse(Pval_Lag_0_second<threshold,1,0))
Da$L0SigC <- factor(with(Da,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
Dr$L0SigBin <- with(Dr,ifelse(Pval_Lag_0_second<threshold,1,0))
Dr$L0SigC <- factor(with(Dr,ifelse(Pval_Lag_0_second<threshold,ifelse(Coeff_Lag_0_second<0,"Neg","Pos"),"Open")))
#per session
sessions <- unique(Da$Session)
# Initialize Dallgrams outside the loop to collect data across all sessions
Dallgrams <- data.frame(ngrams = character(), Resource = factor())
# Iterate over sessions
for(session in unique(Da$Session)) {
session_d1 <- subset(Da, Session == session)
time_series_d1 <- session_d1$L0SigC
three_grams_d1 <- vector("list", length(time_series_d1) - 1)
for (i in 1:(length(time_series_d1) - 1)) {
three_grams_d1[[i]] <- paste(time_series_d1[i], time_series_d1[i+1])
}
three_grams_vector_d1 <- unlist(three_grams_d1)
Da3grams_d1 <- data.frame(ngrams = three_grams_vector_d1, Resource = factor(rep("Actual", length(three_grams_vector_d1))))
session_d2 <- subset(Dr, Session == session)
time_series_d2 <- session_d2$L0SigC
three_grams_d2 <- vector("list", length(time_series_d2) - 1)
for (i in 1:(length(time_series_d2) - 1)) {
three_grams_d2[[i]] <- paste(time_series_d2[i], time_series_d2[i+1])
}
three_grams_vector_d2 <- unlist(three_grams_d2)
Dr3grams_d2 <- data.frame(ngrams = three_grams_vector_d2, Resource = factor(rep("Reversed", length(three_grams_vector_d2))))
# Append to Dallgrams
Dallgrams <- rbind(Dallgrams, Da3grams_d1, Dr3grams_d2)
}
# Aggregate Dallgrams to sum counts for each unique ngrams and Resource combination
Dallgrams$Count <- 1 # Add a count column for aggregation
DallgramsSum <- aggregate(Count ~ ngrams + Resource, data = Dallgrams, FUN = sum)
# Now DallgramsSum contains the summed counts for all ngrams and Resource combinations across all sessions
DallgramsSum$Resource <- as.factor(DallgramsSum$Resource)
DallgramsSum$ngrams <- as.factor(DallgramsSum$ngrams)
# Now use xtabs for cross-tabulation without specifying a numeric count
contingencyTable <- xtabs(Count ~ ngrams + Resource, data = DallgramsSum)
chisq_plot.apr(contingencyTable,0.05)
######End of Reversed
